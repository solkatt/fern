[{"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\index.js":"1","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\reportWebVitals.js":"2","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\app\\index.js":"3","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\index.js":"4","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\Links.jsx":"5","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\Logo.jsx":"6","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\NavBar.jsx":"7","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\index.js":"8","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesInsert.jsx":"9","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesList.jsx":"10","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesUpdate.jsx":"11","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\api\\index.js":"12","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\JoinModal.jsx":"13","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\LoginModal.jsx":"14","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\Landing.jsx":"15","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\context\\UserContext.jsx":"16","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\functionalComp.jsx":"17","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\FunctionalComp.jsx":"18","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\storage.js":"19","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\UserDashboard.jsx":"20","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Products.jsx":"21","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\AddProduct.jsx":"22","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\EditProduct.jsx":"23","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Store.jsx":"24","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\FileUpload.js":"25","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\LoadingAnimation.jsx":"26","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\CreateStore.jsx":"27","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\FileUploadStore.js":"28","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\Storefront.jsx":"29","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\context\\CartContext.jsx":"30","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\CartNavBar.jsx":"31","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\CustomerDash\\Cart.jsx":"32","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\CustomerDash\\Checkout.jsx":"33","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Orders.jsx":"34"},{"size":478,"mtime":1609844367417,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1745,"mtime":1611774853872,"results":"38","hashOfConfig":"36"},{"size":332,"mtime":1611694042986,"results":"39","hashOfConfig":"36"},{"size":661,"mtime":1610460895457,"results":"40","hashOfConfig":"36"},{"size":222,"mtime":1609844912277,"results":"41","hashOfConfig":"36"},{"size":3092,"mtime":1611777535249,"results":"42","hashOfConfig":"36"},{"size":549,"mtime":1611774844568,"results":"43","hashOfConfig":"36"},{"size":280,"mtime":1609845750307,"results":"44","hashOfConfig":"36"},{"size":851,"mtime":1610107886183,"results":"45","hashOfConfig":"36"},{"size":285,"mtime":1609845763009,"results":"46","hashOfConfig":"36"},{"size":3150,"mtime":1611775031471,"results":"47","hashOfConfig":"36"},{"size":3621,"mtime":1611713289667,"results":"48","hashOfConfig":"36"},{"size":2785,"mtime":1610382486841,"results":"49","hashOfConfig":"36"},{"size":1353,"mtime":1611776561795,"results":"50","hashOfConfig":"36"},{"size":4070,"mtime":1611168443249,"results":"51","hashOfConfig":"36"},{"size":415,"mtime":1610371190675,"results":"52","hashOfConfig":"36"},{"size":271,"mtime":1611323781305,"results":"53","hashOfConfig":"36"},{"size":631,"mtime":1610370739210,"results":"54","hashOfConfig":"36"},{"size":998,"mtime":1611777288829,"results":"55","hashOfConfig":"36"},{"size":4648,"mtime":1611713162537,"results":"56","hashOfConfig":"36"},{"size":3843,"mtime":1611168455437,"results":"57","hashOfConfig":"36"},{"size":5142,"mtime":1610641149975,"results":"58","hashOfConfig":"36"},{"size":4665,"mtime":1611778718456,"results":"59","hashOfConfig":"36"},{"size":2968,"mtime":1611572226119,"results":"60","hashOfConfig":"36"},{"size":585,"mtime":1611600490568,"results":"61","hashOfConfig":"36"},{"size":5587,"mtime":1611580614053,"results":"62","hashOfConfig":"36"},{"size":2962,"mtime":1611575990082,"results":"63","hashOfConfig":"36"},{"size":4812,"mtime":1611705824615,"results":"64","hashOfConfig":"36"},{"size":3341,"mtime":1611770398941,"results":"65","hashOfConfig":"36"},{"size":1300,"mtime":1611694581615,"results":"66","hashOfConfig":"36"},{"size":5343,"mtime":1611770075983,"results":"67","hashOfConfig":"36"},{"size":9310,"mtime":1611772175879,"results":"68","hashOfConfig":"36"},{"size":3703,"mtime":1611775286865,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"3buf84",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\index.js",[],["147","148"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\reportWebVitals.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\app\\index.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\index.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\Links.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\Logo.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\NavBar.jsx",["149"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\index.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesInsert.jsx",[],["150","151"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesList.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\MoviesUpdate.jsx",[],["152","153"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\api\\index.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\JoinModal.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\LoginModal.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\Landing.jsx",["154"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\context\\UserContext.jsx",["155"],"import React from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport api from '../api'\r\n\r\nimport {\r\n  getFromStorage,\r\n  setInStorage,\r\n  removeFromStorage,\r\n} from \"../utils/storage\";\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport class UserProvider extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: '',\r\n      email: '',\r\n      id: '',\r\n      isLoggedIn: false,\r\n      isAdmin: false,\r\n      isLoading: true,\r\n      //   token: \"\",\r\n      redirect: false,\r\n      storeID: '',\r\n\r\n      //   onSignIn: this.onSignIn,\r\n      onSignOut: this.onSignOut,\r\n      //   getAllProducts: this.getAllProducts,\r\n      //   displayAllProducts: this.displayAllProducts,\r\n      //   setUsername: this.setUsername,\r\n      getUserData: this.getUserData,\r\n      renderRedirect: this.renderRedirect,\r\n      setRedirect: this.setRedirect,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getUserData();\r\n  }\r\n\r\n  getUserData = async () => {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    const obj = getFromStorage(\"storage-object\");\r\n    if (obj && obj.token) {\r\n      const { token } = obj;\r\n      console.log(token)\r\n\r\n\r\n      //   const { firstName, email, password } = this.state;\r\n\r\n      const payload = {\r\n        params: {\r\n\r\n        },\r\n        headers: {\r\n          \"x-auth-token\": token,\r\n          \"content-type\": \"application/json\"\r\n        }\r\n      }\r\n\r\n\r\n\r\n     await api.getCurrentUser(payload)\r\n        .then((res) => {\r\n\r\n          if (res.data) {\r\n            const { name, _id, isAdmin, email, storeID } = res.data\r\n\r\n            this.setState({\r\n              username: name,\r\n              id: _id,\r\n              isAdmin: isAdmin,\r\n              email: email,\r\n              isLoading: false,\r\n              isLoggedIn: true,\r\n              storeID: storeID,\r\n            })\r\n          } else {\r\n            this.setState({\r\n              isLoading: false,\r\n            })\r\n          }\r\n        }, (err) => {\r\n          console.log(err)\r\n          this.setState({\r\n            isLoading: false,\r\n          })\r\n        })\r\n\r\n    }\r\n\r\n  };\r\n\r\n  //   setUsername = (username) => {\r\n  //     this.setState({\r\n  //       username: username,\r\n  //     });\r\n  //   };\r\n\r\n  //   onSignIn = (username, password) => {\r\n\r\n  //     this.setState({\r\n  //       isLoading: true,\r\n  //     });\r\n\r\n  //     fetch(\"http://localhost:5000/login\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       body: JSON.stringify({\r\n  //         username: username,\r\n  //         password: password,\r\n  //       }),\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((json) => {\r\n  //         if (json.token) {\r\n  //           setInStorage(\"storage-object\", { token: json.token });\r\n\r\n  //           this.getUserData();\r\n  //         } else {\r\n  //           alert(json.message);\r\n  //         }\r\n  //       })\r\n  //       .catch();\r\n  //   };\r\n\r\n  onSignOut = () => {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n\r\n    const obj = getFromStorage(\"storage-object\");\r\n    if (obj && obj.token) {\r\n\r\n      removeFromStorage(\"storage-object\", {\r\n        token: obj.token,\r\n      });\r\n      this.setState({\r\n        isLoading: false,\r\n        isLoggedIn: false,\r\n        isAdmin: false,\r\n      });\r\n      // this.setRedirect();\r\n\r\n    } else {\r\n      this.setState({\r\n        isLoading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  // setRedirect = () => {\r\n  //   this.setState({\r\n  //     redirect: true,\r\n  //   });\r\n  // };\r\n\r\n  // renderRedirect = () => {\r\n  //   console.log(this.state.redirect)\r\n  //   if (this.state.redirect || !this.state.isAdmin) {\r\n  //     console.log('RenderRedirect fired')\r\n\r\n  //     return <Redirect to=\"/\" />;\r\n  //   }\r\n  // };\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <UserContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserContext;\r\nexport const Consumer = UserContext.Consumer;","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\functionalComp.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\FunctionalComp.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\storage.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\UserDashboard.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Products.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\AddProduct.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\EditProduct.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Store.jsx",["156"],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\FileUpload.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\LoadingAnimation.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\CreateStore.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\utils\\FileUploadStore.js",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\Storefront.jsx",[],"C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\context\\CartContext.jsx",["157","158","159"],"import React from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport api from '../api'\r\n\r\nimport {\r\n  getFromStorage,\r\n  setInStorage,\r\n  removeFromStorage,\r\n} from \"../utils/storage\";\r\n\r\nconst CartContext = React.createContext();\r\n\r\nexport class CartProvider extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      shoppingCart: [],\r\n      store: [],\r\n\r\n      addToCart: this.addToCart,\r\n      getTotalQuantity: this.getTotalQuantity,\r\n      linkCartToStore: this.linkCartToStore,\r\n      loadCartStore: this.loadCartStore,\r\n      calculateSum: this.calculateSum,\r\n\r\n    };\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  componentDidMount = async () => {\r\n    if (localStorage.getItem(\"cart\") === null) {\r\n      localStorage.setItem(\"cart\", JSON.stringify([]));\r\n    }\r\n    this.setState({\r\n      shoppingCart: JSON.parse(localStorage.getItem(\"cart\")),\r\n    });\r\n\r\n  };\r\n\r\n\r\n  addToCart = (product, store) => {\r\n\r\n    // this.linkCartToStore(store)\r\n\r\n    const alreadyInCart = this.state.shoppingCart.some(\r\n      (element) => element.product === product\r\n    );\r\n    const cloneShoppingCart = Object.assign([], this.state.shoppingCart);\r\n    const productInCart = cloneShoppingCart.find(\r\n      (element) => element.product === product\r\n    );\r\n\r\n    if (!this.checkStockAvailability(productInCart, product)) {\r\n      return;\r\n    }\r\n\r\n    if (alreadyInCart) {\r\n      alert('already in cart')\r\n      const existingItem = cloneShoppingCart.find(\r\n        (element) => element.product === product\r\n      );\r\n      existingItem.quantity += 1;\r\n    } else {\r\n      const itemInCart = { product: product, quantity: 1, };\r\n\r\n      cloneShoppingCart.push(itemInCart);\r\n    }\r\n\r\n    this.setState({ shoppingCart: cloneShoppingCart });\r\n    localStorage.setItem(\"cart\", JSON.stringify(cloneShoppingCart));\r\n    alert(\"Item added to cart\");\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  linkCartToStore = (storeID) => {\r\n\r\n    api.getStoreById(storeID).then((store) => {\r\n      this.setState({ store: store.data.data })\r\n \r\n    }, (err) => {\r\n      console.log(err)\r\n    })\r\n\r\n    // TODO\r\n    // IF NOT SAME STORE AS BEFORE ASK IF EMPTY CART\r\n\r\n  }\r\n\r\n  calculateSum = (products) => {\r\n\r\n    \r\n    if(!products) return\r\n    \r\n    let sum = 0;\r\n    for (let i = 0; i < products.length; i++) {\r\n      sum =\r\n        products[i].price *\r\n          products[i].cartQuantity +\r\n        sum;\r\n    }\r\n\r\n     return sum;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  checkStockAvailability(productInCart, product) {\r\n    const quantity = productInCart ? productInCart.quantity : 0;\r\n    if (quantity + 1 > product.stock_quantity) {\r\n      alert(\"This article is out of stock.\");\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  getTotalQuantity = () => {\r\n    let totalQuantity = 0;\r\n    let shoppingCart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    if (shoppingCart != null) {\r\n      for (const product of shoppingCart) {\r\n        totalQuantity += product.quantity;\r\n      }\r\n    } else {\r\n      localStorage.setItem(\"cart\", JSON.stringify([]));\r\n      this.setState({ shoppingCart: [] });\r\n    }\r\n    return totalQuantity;\r\n  };\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <CartContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </CartContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CartContext;\r\nexport const Consumer = CartContext.Consumer;","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\components\\CartNavBar.jsx",["160"],"import React, { Component } from 'react';\r\n\r\n\r\nimport { AiOutlineShoppingCart } from 'react-icons/ai';\r\nimport api from '../api'\r\nimport '../style/CartNavBar.scss'\r\n\r\nimport CartContext from '../context/CartContext';\r\nimport {Cart} from '../pages/index'\r\n\r\n\r\nclass CartNavBar extends Component {\r\n\r\n    static contextType = CartContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: '',\r\n            cartOpen: false,\r\n\r\n        }\r\n\r\n        this.onClickCart = this.onClickCart.bind(this);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        console.log(this.context)\r\n    }\r\n\r\n\r\n\r\n    onClickCart(event) {\r\n        this.setState(prevState => ({\r\n            cartOpen: !prevState.cartOpen\r\n        }));\r\n\r\n        console.log('cartOpen:', this.state.cartOpen)\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <>\r\n\r\n                <div className='cartNavBar'>\r\n                    <h3>Cart</h3>\r\n\r\n                    <AiOutlineShoppingCart onClick={this.onClickCart} />\r\n                    <h4>{this.context.getTotalQuantity()}</h4>\r\n                    {(this.state.cartOpen) ? <Cart onCloseModal={this.onClickCart} /> : ''}\r\n\r\n                </div>\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CartNavBar","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\CustomerDash\\Cart.jsx",["161","162"],"import React, { Component } from 'react';\r\nimport '../../style/Cart.scss'\r\nimport '../../style/Common.scss'\r\n\r\nimport { FaWindowClose } from 'react-icons/fa';\r\nimport api from '../../api'\r\n\r\nimport CartContext from '../../context/CartContext';\r\nimport LoadingAnimation from '../../components/LoadingAnimation';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Cart extends Component {\r\n    static contextType = CartContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n            isLoading: false,\r\n        }\r\n\r\n        this.onCloseModal = this.onCloseModal.bind(this);\r\n        this.onClickOutside = this.onClickOutside.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.displayCartContent = this.displayCartContent.bind(this);\r\n        this.loadCartData = this.loadCartData.bind(this);\r\n\r\n    }\r\n\r\n    onCloseModal = () => {\r\n        this.props.onCloseModal()\r\n        this.displayCartContent()\r\n    }\r\n\r\n\r\n    onClickOutside = (event) => {\r\n        const specifiedElement = document.querySelector('.join-modal')\r\n        let isClickInside = specifiedElement.contains(event.target)\r\n        if (!isClickInside) {\r\n            this.onCloseModal()\r\n        };\r\n\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const value = event.target.value;\r\n        const field = event.target.name;\r\n        this.setState({\r\n            [field]: value\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidMount = async () => {\r\n\r\n    \r\n\r\n\r\n\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n        await this.loadCartData()\r\n\r\n        //then take storeID from cart to link to\r\n    }\r\n\r\n\r\n    handleSubmit = async () => {\r\n        // this.setState({ isLoading: true })\r\n\r\n        // const { firstName, email, password } = this.state;\r\n\r\n        // const payload = {\r\n        //     name: firstName,\r\n        //     email: email,\r\n        //     password: password,\r\n        // }\r\n\r\n        // await api.registerUser(payload).then((res) => {\r\n        //     console.log(res);\r\n\r\n        // }, (err) => {\r\n        //     console.log(err)\r\n        // })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    loadCartData = async () => {\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n\r\n        const shoppingCart = this.context.shoppingCart\r\n\r\n\r\n\r\n        await shoppingCart.map(\r\n            (product) => {\r\n                api.getProductById(product.product).then((dbProduct) => {\r\n                 \r\n\r\n                    const loadedProduct = dbProduct.data.data\r\n\r\n                     loadedProduct.cartQuantity = product.quantity\r\n     \r\n                    this.setState({\r\n                        products: [...this.state.products, loadedProduct],\r\n                        isLoading: false,\r\n                    })\r\n                 \r\n                    this.context.linkCartToStore(loadedProduct.storeID)\r\n\r\n\r\n                    \r\n\r\n\r\n                }, (err) => {\r\n                    console.log(err)\r\n                    this.setState({\r\n                        isLoading: false,\r\n                    })\r\n                })\r\n\r\n\r\n\r\n                // return (\r\n                //     <div key={index}>\r\n                //       <h2>{product}</h2>\r\n                //       <h2>{product.price}kr</h2>\r\n                //       <img style={{height: '100px', width: '100px'}} src={image} />\r\n                //     </div>\r\n                // )\r\n\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    displayCartContent = () => {\r\n\r\n\r\n        const products = this.state.products\r\n\r\n        \r\n        if (products.length < 1) return \r\n        \r\n        return (\r\n            <>\r\n                {products.map(\r\n                    (product) => {\r\n                        \r\n                        return (\r\n                            <div key={product._id}>\r\n                                <h3>{product.name}</h3>\r\n                                <h3>{product.price}</h3>\r\n                                <h3>{product.cartQuantity}</h3>\r\n                                <img style={{height: '100px', width: '100px'}} src={product.images[0]} />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    )}\r\n<div>\r\n    Total:{products ? this.context.calculateSum(products) : ''}\r\n\r\n</div>\r\n\r\n            </>\r\n        )\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { isLoading, products } = this.state\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"modal\" onClick={this.onClickOutside}>\r\n                    <div className=\"join-modal\">\r\n                        <FaWindowClose className=\"close pointer\" onClick={this.onCloseModal} />\r\n                        <h1>CART for {this.context.store.name}</h1>\r\n                        {isLoading ? <LoadingAnimation /> : this.displayCartContent()}\r\n\r\n                        {/* <button type=\"submit\" onClick={this.handleSubmit}>Check out</button> */}\r\n\r\n\r\n\r\n\r\n                        <button onClick={this.onCloseModal}><Link to={{  \r\n                            pathname: `/storefront/{${this.context.store.name}}/checkout`,\r\n                            state: {products}}}>\r\n                               Checkout\r\n            </Link></button> \r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\CustomerDash\\Checkout.jsx",["163","164","165","166","167"],"import React, { Component } from 'react'\r\nimport api from '../../api'\r\nimport '../../style/pages/EditProduct.scss'\r\nimport '../../style/pages/PageLayout.scss'\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport CartContext from '../../context/CartContext';\r\nimport LoadingAnimation from '../../components/LoadingAnimation';\r\n\r\nclass Checkout extends Component {\r\n    static contextType = CartContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            products: [],\r\n            store: '',\r\n            name: '',\r\n            email: '',\r\n            adress: [\r\n                {street: '', city: '', zip: 0}\r\n            ],\r\n            phone: 0,\r\n            payment_method: null,\r\n\r\n            isLoading: false,\r\n            redirect: null\r\n        }\r\n\r\n        this.displayCheckout = this.displayCheckout.bind(this)\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n        this.handleAdressChange = this.handleAdressChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n\r\n\r\n\r\n\r\n        // this.showProduct = this.showProduct.bind(this)\r\n        // this.onDeleteProduct = this.onDeleteProduct.bind(this)\r\n        // this.loadProduct = this.loadProduct.bind(this)\r\n        // this.onUpdateProduct = this.onUpdateProduct.bind(this)\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n        await this.loadCartData().then(() => {\r\n            \r\n            this.setState({\r\n                isLoading: false\r\n\r\n            })\r\n\r\n        })\r\n\r\n        // this.setState({store: name})\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //    componentDidMount = async () => {\r\n\r\n    //         const { name } = this.props.match.params\r\n\r\n    //         await this.loadStore(name).then( async () => {\r\n    //             this.loadStoreProducts(this.state.store._id)\r\n\r\n    //         })\r\n\r\n    //     }\r\n\r\n    //     loadStore = async (name) => {\r\n    //         this.setState({ isLoading: true })\r\n\r\n    //         await api.getStoreByName(name).then(store => {\r\n    //             this.setState({\r\n    //                 store: store.data.data,\r\n    //                 isLoading: false,\r\n    //             })\r\n\r\n    //             console.log('DATA', store.data)\r\n    //         }, (err) => {\r\n    //             this.setState({\r\n    //                 isLoading: false,\r\n    //                 redirect: true,\r\n    //             })\r\n    //             console.log(err)\r\n    //         })\r\n    //     }\r\n\r\n\r\n\r\n\r\n\r\n    handleInputChange = (event) => {\r\n        const value = event.target.value;\r\n        const field = event.target.name;\r\n        this.setState({\r\n                [field]: value\r\n        })\r\n\r\n\r\n    \r\n\r\n\r\n        // this.setState({...this.state.product, name: value});\r\n\r\n\r\n        // this.setState(prevState => {\r\n        //     let product = { ...prevState.product };  // creating copy of state variable jasper\r\n        //     product[field]  = value;                     // update the name property, assign a new value                 \r\n        //     return { product };                                 // return new object jasper object\r\n        //   })\r\n\r\n\r\n\r\n    }\r\n\r\n    handleAdressChange = (event) => {\r\n\r\n        const value = event.target.value;\r\n        const field = event.target.name;\r\n        \r\n        const adress = {...this.state.adress}\r\n        adress[field] = value\r\n        this.setState({adress})\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit = async () => {\r\n\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n        });\r\n\r\n\r\n        alert('fired')\r\n\r\n        \r\n        const { products, name, email, adress, phone, payment_method } = this.state\r\n\r\n        const store = this.context.store\r\n\r\n        const total_price = this.context.calculateSum(products)\r\n        \r\n        const destructuredProducts = products.map((fullProduct) => {\r\n            return (\r\n                {product: fullProduct.name, productID: fullProduct._id, price: fullProduct.price, quantity: fullProduct.cartQuantity }\r\n            )\r\n        })\r\n\r\n\r\n        const payload = {\r\n            products: destructuredProducts,\r\n            storeName: store.name,\r\n            name: name,\r\n            email: email,\r\n            adress: [\r\n                {street: adress.street, city: adress.city, zip: adress.zip}\r\n            ],\r\n            phone: phone,\r\n            payment_method: 'DHL',\r\n            total_price: total_price,\r\n            storeID: store._id\r\n        }\r\n\r\n\r\n   \r\n\r\n// create Store\r\n// Then put StoreID to User\r\n        await api.createOrder(payload).then((res) => {\r\n\r\n\r\n            // const storeID = res.data.id\r\n            this.setState({\r\n                isLoading: false,\r\n                // rediret: 'ordercomplete'\r\n            })\r\n            alert('Order successfully created')\r\n\r\n            console.log(res.data)\r\n\r\n        }, (err) => {\r\n            console.log(err)\r\n            this.setState({\r\n                isLoading: false,\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            isLoading: false,\r\n            // rediret: 'ordercomplete'\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    displayCheckout = () => {\r\n\r\n        const store = this.context.store\r\n        const products = this.state.products\r\n\r\n        let totalPrice = 0\r\n\r\n        if(this.state.products) {\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <h2>POOP</h2>\r\n                <h2>Store: {store.name}</h2>\r\n\r\n\r\n                <div>\r\n                    <h2>Cart:</h2>\r\n                    {this.state.products.map((product) => {\r\n                        return (\r\n                            <div key={product._id}>\r\n                                <h2>Product name: {product.name}</h2>\r\n                                <img src={product.images[0]} style={{ height: '200px', width: '200px' }} />\r\n                                <h2>Price styck: {product.price}</h2>\r\n                                <h2>quantity: {product.cartQuantity}</h2>\r\n                                <p>+</p>\r\n                                <p>-</p>\r\n\r\n                                Total:{products ? this.context.calculateSum(products) : ''}\r\n\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Customer info:</h2>\r\n                    <input name=\"name\" type=\"text\" placeholder=\"Name\" onChange={this.handleInputChange}></input>\r\n                    <input name=\"email\" type=\"email\" placeholder=\"Email\" onChange={this.handleInputChange}></input>\r\n                    <input name=\"phone\" type=\"number\" placeholder=\"Phone\" onChange={this.handleInputChange}></input>\r\n                    <input name=\"adress\" type=\"text\" placeholder=\"Adress\" onChange={this.handleAdressChange}></input>\r\n                    <input name=\"city\" type=\"text\" placeholder=\"City\" onChange={this.handleAdressChange}></input>\r\n                    <input name=\"zip\" type=\"number\" placeholder=\"Zip\" onChange={this.handleAdressChange}></input>\r\n                    <button>Next</button>\r\n                </div>\r\n                <div>\r\n                    <h2>Shipping</h2>\r\n\r\n                    <label class=\"container\">DHL\r\n                        <input type=\"checkbox\"  />\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <button>Next</button>\r\n\r\n                </div>\r\n                <div>\r\n                    <h2>Payment</h2>\r\n\r\n                  \r\n                    <button onClick={this.handleSubmit}>Place Order</button>\r\n\r\n                </div>\r\n\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    loadCartData = async () => {\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n\r\n        const shoppingCart = this.context.shoppingCart\r\n\r\n\r\n        await shoppingCart.map(\r\n            (product) => {\r\n                api.getProductById(product.product).then((dbProduct) => {\r\n\r\n\r\n                    const loadedProduct = dbProduct.data.data\r\n\r\n                    loadedProduct.cartQuantity = product.quantity\r\n\r\n                    this.setState({\r\n                        products: [...this.state.products, loadedProduct],\r\n                        isLoading: false,\r\n                    })\r\n\r\n\r\n\r\n\r\n\r\n                }, (err) => {\r\n                    console.log(err)\r\n                    this.setState({\r\n                        isLoading: false,\r\n                    })\r\n                })\r\n\r\n\r\n\r\n                // return (\r\n                //     <div key={index}>\r\n                //       <h2>{product}</h2>\r\n                //       <h2>{product.price}kr</h2>\r\n                //       <img style={{height: '100px', width: '100px'}} src={image} />\r\n                //     </div>\r\n                // )\r\n\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { isLoading, products } = this.state\r\n\r\n\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"page-layout\">\r\n                <div className=\"page-content\">\r\n\r\n\r\n                    {isLoading ? <LoadingAnimation /> : this.displayCheckout()}\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Checkout\r\n\r\n\r\n","C:\\Users\\vikto\\Documents\\Github\\fern\\client\\src\\pages\\UserDash\\Orders.jsx",["168"],"import React, { Component } from 'react'\r\nimport api from '../../api'\r\nimport '../../style/pages/AddProduct.scss'\r\nimport '../../style/pages/PageLayout.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport UserContext from '../../context/UserContext';\r\nimport LoadingAnimation from '../../components/LoadingAnimation'\r\n\r\nclass Orders extends Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            orders: [],\r\n            isLoading: false,\r\n\r\n        }\r\n\r\n\r\n        this.loadStoreOrders = this.loadStoreOrders.bind(this)\r\n        this.displayOrders = this.displayOrders.bind(this)\r\n      \r\n\r\n    }\r\n\r\n\r\n    \r\n    componentDidMount = async () => {\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        await this.context.getUserData().then(() => {\r\n            this.loadStoreOrders()\r\n        })\r\n    }\r\n\r\n\r\n    loadStoreOrders = async () => {\r\n        const { storeID } = this.context\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n        if (storeID) {\r\n            await api.getOrdersByStore(storeID).then(orders => {\r\n                this.setState({\r\n                    orders: orders.data.data,\r\n                    isLoading: false,\r\n                })\r\n\r\n            }, (err) => {\r\n                console.log(err)\r\n                this.setState({\r\n                    isLoading: false,\r\n                })\r\n\r\n            })\r\n        }\r\n        this.setState({ isLoading: false })\r\n\r\n    }\r\n\r\n\r\n\r\n    displayOrders = (orders) => {\r\n        console.log('Orders:', this.state.orders)\r\n\r\n\r\n        if (orders.length < 1) {\r\n            return (\r\n                <>\r\n                    <h2>No orders atm</h2>\r\n                </>\r\n            )\r\n        }\r\n\r\n\r\n\r\n        return (\r\n\r\n            <>\r\n                {orders.map(order =>\r\n                    <div key={order._id} className=\"product-card\">\r\n\r\n                        <h2>Order {order._id}</h2>\r\n                        <h2>Date: {order.createdAt}</h2>\r\n                        <h2>Total: {order.total_price}kr</h2>\r\n\r\n{/* \r\n                        {product.images.length > 0 ?\r\n                            <img style={{ height: '100px', width: '100px' }} src={product.images[0]} alt={product.images.indexOf()} />\r\n                            :\r\n                            <div>DEFUALT IMAGE</div>\r\n\r\n                        }\r\n\r\n                        <h3>{product.name}</h3>\r\n                        <p>{product.description}</p>\r\n                        <h5>{product.price}</h5>\r\n\r\n\r\n                        <div className=\"btns\">\r\n                            <button><Link to={`/products/edit/${product._id}`}>\r\n                                Edit\r\n                               </Link></button>\r\n\r\n                            {/* <button onClick={() => this.onEdit(product._id)}>Edit</button> */}\r\n                            {/* <button onClick={() => this.onDeleteProduct(product._id)}>Delete</button>\r\n                            <button onClick={() => this.showProduct(product._id)}>Show this ID</button>\r\n\r\n                        </div>  */}\r\n                    </div>\r\n                )}\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { orders, isLoading } = this.state\r\n\r\n        return (\r\n\r\n            <div className=\"page-layout\">\r\n                <div className=\"page-content\">\r\n                    <div className=\"product-grid\">\r\n\r\n\r\n\r\n                        {isLoading ? <LoadingAnimation /> : this.displayOrders(orders)}\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Orders\r\n\r\n\r\n",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":3,"column":39,"nodeType":"175","messageId":"176","endLine":3,"endColumn":44},{"ruleId":"169","replacedBy":"177"},{"ruleId":"171","replacedBy":"178"},{"ruleId":"169","replacedBy":"179"},{"ruleId":"171","replacedBy":"180"},{"ruleId":"173","severity":1,"message":"181","line":4,"column":8,"nodeType":"175","messageId":"176","endLine":4,"endColumn":22},{"ruleId":"173","severity":1,"message":"182","line":7,"column":3,"nodeType":"175","messageId":"176","endLine":7,"endColumn":15},{"ruleId":"173","severity":1,"message":"183","line":177,"column":17,"nodeType":"175","messageId":"176","endLine":177,"endColumn":24},{"ruleId":"173","severity":1,"message":"184","line":6,"column":3,"nodeType":"175","messageId":"176","endLine":6,"endColumn":17},{"ruleId":"173","severity":1,"message":"182","line":7,"column":3,"nodeType":"175","messageId":"176","endLine":7,"endColumn":15},{"ruleId":"173","severity":1,"message":"185","line":8,"column":3,"nodeType":"175","messageId":"176","endLine":8,"endColumn":20},{"ruleId":"173","severity":1,"message":"186","line":5,"column":8,"nodeType":"175","messageId":"176","endLine":5,"endColumn":11},{"ruleId":"187","severity":1,"message":"188","line":107,"column":23,"nodeType":"189","messageId":"190","endLine":107,"endColumn":25},{"ruleId":"191","severity":1,"message":"192","line":168,"column":33,"nodeType":"193","endLine":168,"endColumn":106},{"ruleId":"173","severity":1,"message":"194","line":147,"column":55,"nodeType":"175","messageId":"176","endLine":147,"endColumn":69},{"ruleId":"173","severity":1,"message":"195","line":214,"column":13,"nodeType":"175","messageId":"176","endLine":214,"endColumn":23},{"ruleId":"191","severity":1,"message":"192","line":235,"column":33,"nodeType":"193","endLine":235,"endColumn":108},{"ruleId":"187","severity":1,"message":"188","line":293,"column":23,"nodeType":"189","messageId":"190","endLine":293,"endColumn":25},{"ruleId":"173","severity":1,"message":"196","line":335,"column":28,"nodeType":"175","messageId":"176","endLine":335,"endColumn":36},{"ruleId":"173","severity":1,"message":"197","line":5,"column":10,"nodeType":"175","messageId":"176","endLine":5,"endColumn":14},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'Links' is defined but never used.","Identifier","unusedVar",["198"],["199"],["198"],["199"],"'FunctionalComp' is defined but never used.","'setInStorage' is defined but never used.","'storeID' is assigned a value but never used.","'getFromStorage' is defined but never used.","'removeFromStorage' is defined but never used.","'api' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'payment_method' is assigned a value but never used.","'totalPrice' is assigned a value but never used.","'products' is assigned a value but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]